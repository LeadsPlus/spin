#!/usr/bin/env ruby

require 'spin'

def main
  $LOAD_PATH << 'test'
  ENV['RAILS_ENV'] = 'test'
  
  # parse_config
  # trap_signals
  
  @read_pipe, @write_pipe = IO.pipe
  Spin::Watcher.spawn(@write_pipe)
  @write_pipe.close
  Spin::Preloader.preload
  
  timeout = 0.5
  @path_collection = Spin::PathCollection.new
  
  loop do
    if IO.select([@read_pipe], nil, nil, timeout)
      @path_collection.add @read_pipe.gets.chomp
    end
    
    if Spin::TestRunner.idle? && @path_collection.pending?
      Spin::TestRunner.run(@path_collection)
    end
  end
end

trap(:CHLD) {
  while pid = Process.wait(-1, Process::WNOHANG) do
    # abort if the watcher proc dies unexpectedly
    if pid == Spin::Watcher.pid
      abort("Watcher process exited unexpectedly")
    elsif pid == Spin::TestRunner.pid
      Spin::TestRunner.running = false
    else
      abort("WTF did this process come from?")
    end
  end
}

trap(:INT) { exit }

exit main
