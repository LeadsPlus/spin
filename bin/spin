#!/usr/bin/env ruby

require 'spin/watcher'
require 'spin/preloader'
require 'set'
$LOAD_PATH << 'test'
ENV['RAILS_ENV'] = 'test'

def main
  @read_pipe, @write_pipe = IO.pipe
  
  Spin::Watcher.spawn(@write_pipe)
  @write_pipe.close
  Spin::Preloader.preload
  
  timeout = 1
  
  loop do
    while !IO.select([@read_pipe], nil, nil, timeout)
      unless has_forked? || file_queue.empty?
        run_tests
      end
    end
    
    test_file_to_load = @read_pipe.gets.chomp
    file_queue << test_file_to_load
    
    unless has_forked?
      run_tests
    end
  end
end

def has_forked?; @has_forked ||= false; end
def file_queue; @file_queue ||= Set.new; end

def run_tests
  tests_to_run = file_queue.to_a
  puts "running tests: #{tests_to_run}"

  fork { 
    tests_to_run.each { |path| require path }
  }

  file_queue.clear
  @has_forked = true
end

trap(:CHLD) {
  while pid = Process.wait(-1, Process::WNOHANG) do
    # abort if the watcher proc dies unexpectedly
    if pid == Spin::Watcher.pid
      abort("Watcher process exited unexpectedly")
    else
      @has_forked = false
    end
  end
}

exit main
